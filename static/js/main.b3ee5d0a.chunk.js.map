{"version":3,"sources":["oxfordcomma.js","TerpReport.js","TempSlider.js","App.js","serviceWorker.js","index.js"],"names":["oxfordcomma","arr","outStr","length","join","slice","TerpReport","props","crel","ceff","trel","teff","Object","keys","strain","cannabinoids","forEach","can","temperature","bp","push","name","effects","effect","terpenes","terp","canreport","caneffect","terpreport","terpeffect","react_default","a","createElement","TempSlider","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSliderChange","value","setState","state","min","max","step","CBN","CBC","Limonene","a-Pienene","es","onChange","src_TerpReport","React","Component","App","className","class","TempSlider_TempSlider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3ee5d0a.chunk.js","sourcesContent":["function oxfordcomma(arr){\n    var outStr = \"\";\n    if (arr.length === 1) {\n        outStr = arr[0];\n    } else if (arr.length === 2) {\n        outStr = arr.join(' and ');\n    } else if (arr.length > 2) {\n        outStr = arr.slice(0, -1).join(', ') + ', and ' + arr.slice(-1);\n    }\n    return outStr;\n}\nexport default oxfordcomma;\n","import React from 'react';\nimport oxfordcomma from './oxfordcomma';\n\nfunction TerpReport (props){\n    var crel = [];\n    var ceff = [];\n    var trel = [];\n    var teff = [];\n    Object.keys(props.strain.cannabinoids).forEach(function(can){\n        if (props.temperature >= props.strain.cannabinoids[can].bp){\n          crel.push(props.strain.cannabinoids[can].name);\n          props.strain.cannabinoids[can].effects.forEach(function(effect){\n            ceff.push(effect);\n          });\n        };\n    });\n    Object.keys(props.strain.terpenes).forEach(function(terp){\n        if (props.temperature >= props.strain.terpenes[terp].bp){\n          trel.push(terp);\n          props.strain.terpenes[terp].effects.forEach(function(effect){\n            teff.push(effect);\n          });\n        };\n    });\n    var canreport = oxfordcomma(crel);\n    var caneffect = oxfordcomma(ceff);\n    var terpreport = oxfordcomma(trel);\n    var terpeffect = oxfordcomma(teff);\n\n\n\n\n  return(\n    <div>\n    <h2> At {props.temperature}&#176;F, </h2>\n    <label>You will release {canreport} while feeling {caneffect}</label>\n    <p></p>\n    <label>You'll get terpenes {terpreport} while feeling {terpeffect}</label>\n    </div>\n  )\n\n}\nexport default TerpReport;\n","import React from 'react';\nimport TerpReport from './TerpReport'\nimport Roundy from 'roundy';\n\n\nexport default class TempSlider extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      min: 120,\n      max: 500,\n      step: 1,\n      value: 130,\n      strain: {\n        name: \"Charlotte's Web\",\n        cannabinoids: {\n          \"CBN\":{\n            name: \"Cannabineil\",\n            bp: 130,\n            effects: [\"hungry\", \"less nauseated\", \"uplifted\"],\n          },\n          \"CBC\":{\n            name: \"Cannabichromene\",\n            bp: 140,\n            effects: [\"less stressed\", \"giggly\"]\n          }\n        },\n        terpenes:{\n          \"Limonene\":{\n            name: \"Limonene\",\n            bp: 150,\n            effects: [\"like\", \"so\", \"totally stoned man\"],\n          },\n          \"a-Pienene\":{\n            name: \"Alpha Pienene\",\n            bp: 160,\n            effects: [\"pretty\", \"oh so pretty\", \"that the city should give me it's key!\"]\n          }\n        }\n      }\n\n    };\n  }\n  onSliderChange = (value) => {\n    this.setState({value});\n  }\n\n\n  render() {\n    return(\n      <div>\n        <Roundy value={this.state.value} min={this.state.min} max={this.state.max} step={this.state.step}\n        onChange={this.onSliderChange}/>\n        <p></p>\n        <p><label>Strain: {this.state.strain.name}</label> </p>\n        <TerpReport temperature = {this.state.value} strain = {this.state.strain}/>\n\n      </div>\n\n    )\n  }\n\n}\n","import React from 'react';\nimport './App.css';\nimport TempSlider from './TempSlider'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 class=\"display-2\">Better Temp Tool</h1>\n      <p></p>\n      <h1 class=\"display-4\">A tool by Neil to help medical cannabis patients optimize their vaporizer use.</h1>\n      <p></p>\n      <TempSlider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}